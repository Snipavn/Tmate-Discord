import discord
from discord.ext import commands, tasks
from discord import app_commands
import asyncio
import subprocess
import os
import random
import json
from datetime import datetime, timedelta
from dotenv import load_dotenv

# Load .env
load_dotenv()
TOKEN = os.getenv("TOKEN")

intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# Config
OWNER_ID = 123456789012345678  # Thay b·∫±ng ID c·ªßa b·∫°n
ALLOWED_CHANNEL_ID = 123456789012345678  # Thay b·∫±ng ID k√™nh bot ƒë∆∞·ª£c ph√©p ho·∫°t ƒë·ªông
CREDIT_FILE = "credits.json"
CONFIG_FILE = "user_configs.json"
VPS_DIR = "vps"

if not os.path.exists(CREDIT_FILE):
    with open(CREDIT_FILE, "w") as f:
        json.dump({}, f)

if not os.path.exists(CONFIG_FILE):
    with open(CONFIG_FILE, "w") as f:
        json.dump({}, f)

if not os.path.exists(VPS_DIR):
    os.makedirs(VPS_DIR)

def load_credits():
    with open(CREDIT_FILE) as f:
        return json.load(f)

def save_credits(data):
    with open(CREDIT_FILE, "w") as f:
        json.dump(data, f)

def load_configs():
    with open(CONFIG_FILE) as f:
        return json.load(f)

def save_configs(data):
    with open(CONFIG_FILE, "w") as f:
        json.dump(data, f)

def get_expiry_time():
    return (datetime.utcnow() + timedelta(days=1)).isoformat()

def get_session_path(user_id):
    return os.path.join(VPS_DIR, str(user_id))

def get_tmate_script(user_id):
    folder = get_session_path(user_id)
    return f"""
rm -rf {folder}
mkdir -p {folder}
cd {folder}
apt update -y && apt install -y wget curl proot tar
wget https://raw.githubusercontent.com/proot-me/proot-static-build/master/static/proot -O proot
chmod +x proot
wget https://cdimage.ubuntu.com/ubuntu-base/releases/22.04/release/ubuntu-base-22.04.4-base-amd64.tar.gz
mkdir rootfs
./proot -S rootfs tar -xzf ubuntu-base-22.04.4-base-amd64.tar.gz
tmate -S {folder}/tmate.sock new-session -d
tmate -S {folder}/tmate.sock wait tmate-ready
tmate -S {folder}/tmate.sock display -p '#{{tmate_ssh}}'
"""

async def send_dm(user, msg):
    try:
        await user.send(msg)
    except:
        pass

@tree.command(name="getcredit", description="Nh·∫≠n credit m·ªói 12 gi·ªù")
async def getcredit(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    credit_data = load_credits()
    now = datetime.utcnow()

    last_time = credit_data.get(user_id, {}).get("last", "1970-01-01T00:00:00")
    last = datetime.fromisoformat(last_time)

    if now - last < timedelta(hours=12):
        await interaction.response.send_message("‚è≥ M·ªói 12 ti·∫øng m·ªõi ƒë∆∞·ª£c xin credit. ƒê·ª£i ti·∫øp ƒëi th·∫±ng ngu.")
        return

    credit_data.setdefault(user_id, {"credit": 0})
    credit_data[user_id]["credit"] += 1
    credit_data[user_id]["last"] = now.isoformat()
    save_credits(credit_data)

    await interaction.response.send_message("üí∞ Cho m√†y 1 credit n·ªØa n√®, ti√™u cho kh√¥n.")

@tree.command(name="credit", description="Xem credit hi·ªán t·∫°i")
async def credit(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    credit_data = load_credits()
    credit = credit_data.get(user_id, {}).get("credit", 0)
    await interaction.response.send_message(f"üí∏ M√†y c√≤n {credit} credit ngu.")

@tree.command(name="givecredit", description="TƒÉng credit (OWNER)")
async def givecredit(interaction: discord.Interaction, member: discord.Member, amount: int):
    if interaction.user.id != OWNER_ID:
        await interaction.response.send_message("C√∫t. Kh√¥ng ƒë·ªß tu·ªïi.", ephemeral=True)
        return
    user_id = str(member.id)
    credit_data = load_credits()
    credit_data.setdefault(user_id, {"credit": 0})
    credit_data[user_id]["credit"] += amount
    save_credits(credit_data)
    await interaction.response.send_message(f"ƒê√£ tƒÉng {amount} credit cho th·∫±ng {member.display_name}.")

@tree.command(name="xoacredit", description="X√≥a s·∫°ch credit (OWNER)")
async def xoacredit(interaction: discord.Interaction, member: discord.Member):
    if interaction.user.id != OWNER_ID:
        await interaction.response.send_message("M√†y l√† c√°i th√° g√¨?", ephemeral=True)
        return
    user_id = str(member.id)
    credit_data = load_credits()
    if user_id in credit_data:
        del credit_data[user_id]
    save_credits(credit_data)
    await interaction.response.send_message(f"Xo√° m·∫π s·∫°ch credit c·ªßa th·∫±ng {member.display_name} r·ªìi.")

@tree.command(name="shopping", description="Mua c·∫•u h√¨nh VPS")
async def shopping(interaction: discord.Interaction):
    configs = {
        "2GB RAM, 2 core": 20,
        "4GB RAM, 4 core": 40,
        "8GB RAM, 8 core": 80,
        "12GB RAM, 12 core": 120,
        "16GB RAM, 16 core": 160
    }
    msg = "**üõí C·ª≠a h√†ng VPS:**\n"
    for name, cost in configs.items():
        msg += f"- {name} = {cost} credit\n"
    await interaction.response.send_message(msg)

@tree.command(name="setcauhinh", description="Ch·ªçn c·∫•u h√¨nh VPS ƒë·ªÉ deploy")
async def setcauhinh(interaction: discord.Interaction, ram_cpu: str):
    configs = {
        "2": 20,
        "4": 40,
        "8": 80,
        "12": 120,
        "16": 160
    }
    if ram_cpu not in configs:
        await interaction.response.send_message("C·∫•u h√¨nh ngu. Ch·ªçn 2, 4, 8, 12, ho·∫∑c 16.", ephemeral=True)
        return
    user_id = str(interaction.user.id)
    data = load_configs()
    data[user_id] = ram_cpu
    save_configs(data)
    await interaction.response.send_message(f"‚úÖ C·∫•u h√¨nh VPS c·ªßa m√†y ƒë√£ ƒë∆∞·ª£c set th√†nh {ram_cpu}GB RAM, {ram_cpu} core.")

@tree.command(name="deploy", description="T·∫°o VPS (t·ªën 10 credit/ng√†y)")
async def deploy(interaction: discord.Interaction):
    if interaction.channel.id != ALLOWED_CHANNEL_ID:
        await interaction.response.send_message("C√∫t v·ªÅ channel quy ƒë·ªãnh.", ephemeral=True)
        return

    user_id = str(interaction.user.id)
    credit_data = load_credits()
    config_data = load_configs()

    if user_id not in config_data:
        await interaction.response.send_message("Ch∆∞a set c·∫•u h√¨nh. D√πng /setcauhinh tr∆∞·ªõc.", ephemeral=True)
        return

    if credit_data.get(user_id, {}).get("credit", 0) < 10:
        await interaction.response.send_message("M√†y kh√¥ng ƒë·ªß credit, v·ªÅ c√†y ti·∫øp ƒëi.", ephemeral=True)
        return

    folder = get_session_path(user_id)
    os.makedirs(folder, exist_ok=True)
    script = get_tmate_script(user_id)

    with open(f"{folder}/setup.sh", "w") as f:
        f.write(script)

    proc = await asyncio.create_subprocess_shell(
        f"bash {folder}/setup.sh",
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE,
    )
    stdout, _ = await proc.communicate()
    ssh_link = stdout.decode().strip().splitlines()[-1]

    credit_data[user_id]["credit"] -= 10
    credit_data[user_id]["expire"] = get_expiry_time()
    save_credits(credit_data)

    await send_dm(interaction.user, f"üñ•Ô∏è VPS m√†y ƒë√¢y: `{ssh_link}`")
    await interaction.response.send_message("‚úÖ ƒê√£ g·ª≠i link VPS qua tin nh·∫Øn ri√™ng. C√∫t qua ƒë√≥ m√† d√πng.")

@tree.command(name="timevps", description="Xem th·ªùi gian c√≤n l·∫°i VPS")
async def timevps(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    credit_data = load_credits()
    expire = credit_data.get(user_id, {}).get("expire")
    if not expire:
        await interaction.response.send_message("M√†y ch∆∞a c√≥ VPS ƒë√¢u con g√†.")
        return
    expire_time = datetime.fromisoformat(expire)
    remaining = expire_time - datetime.utcnow()
    if remaining.total_seconds() <= 0:
        await interaction.response.send_message("VPS m√†y h·∫øt h·∫°n l√¢u r·ªìi, x√†i k√© h·∫£?")
    else:
        await interaction.response.send_message(f"‚è≥ VPS c√≤n s·ªëng {str(remaining).split('.')[0]}.")

@tree.command(name="renew", description="Gia h·∫°n VPS (10 credit)")
async def renew(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    credit_data = load_credits()

    if credit_data.get(user_id, {}).get("credit", 0) < 10:
        await interaction.response.send_message("M√†y kh√¥ng ƒë·ªß credit ƒë·ªÉ gia h·∫°n, b·ªëc c.!", ephemeral=True)
        return

    expire_time = datetime.fromisoformat(credit_data[user_id].get("expire", get_expiry_time()))
    credit_data[user_id]["credit"] -= 10
    credit_data[user_id]["expire"] = (expire_time + timedelta(days=1)).isoformat()
    save_credits(credit_data)

    await interaction.response.send_message("‚úÖ Gia h·∫°n VPS xong r·ªìi ƒë√≥ th·∫±ng ngu.")

@tree.command(name="stopvps", description="Xo√° VPS")
async def stopvps(interaction: discord.Interaction):
    user_id = str(interaction.user.id)
    folder = get_session_path(user_id)
    if os.path.exists(folder):
        subprocess.run(["rm", "-rf", folder])
    await interaction.response.send_message("üõë Xo√° s·∫°ch VPS r·ªìi ƒë√≥ th·∫±ng ngu.")

@bot.event
async def on_ready():
    await tree.sync()
    print(f"Bot ƒë√£ online v·ªõi t√™n: {bot.user}")
