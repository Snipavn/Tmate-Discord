import discord
from discord.ext import commands, tasks
from discord import app_commands
import subprocess
import time
import os
import json
from dotenv import load_dotenv
from datetime import datetime

# Ch·ªâ d√πng .env ƒë·ªÉ l·∫•y TOKEN
load_dotenv()
TOKEN = os.getenv("TOKEN")

# C·∫•u h√¨nh gi·ªõi h·∫°n
CHANNEL_ID = 1378918272812060742  # Thay b·∫±ng channel ID c·ªßa b·∫°n
OWNER_ID = 882844895902040104    # Thay b·∫±ng owner ID c·ªßa b·∫°n

# Kh·ªüi t·∫°o bot
intents = discord.Intents.default()
bot = commands.Bot(command_prefix="!", intents=intents)
tree = bot.tree

# T·∫°o file database n·∫øu ch∆∞a c√≥
if not os.path.exists("database.txt"):
    with open("database.txt", "w") as f:
        f.write(json.dumps({"sessions": {}, "credits": {}, "cooldown": {}}))

def load_db():
    with open("database.txt", "r") as f:
        return json.load(f)

def save_db(data):
    with open("database.txt", "w") as f:
        json.dump(data, f, indent=4)

# Auto x√≥a VPS h·∫øt h·∫°n m·ªói 60 gi√¢y
@tasks.loop(seconds=60)
async def auto_remove_vps():
    db = load_db()
    now = int(time.time())
    to_delete = [uid for uid, v in db["sessions"].items() if v["time"] < now]
    for uid in to_delete:
        user = await bot.fetch_user(int(uid))
        try:
            await user.send("‚ö†Ô∏è VPS c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n v√† ƒë√£ b·ªã x√≥a.")
        except:
            pass
        del db["sessions"][uid]
    save_db(db)

# Status bot: ƒêang xem {count} vps
@bot.event
async def on_ready():
    await tree.sync()
    auto_remove_vps.start()
    db = load_db()
    await bot.change_presence(activity=discord.Activity(
        type=discord.ActivityType.watching,
        name=f"{len(db['sessions'])} VPS ƒëang ch·∫°y"
    ))
    print(f"Bot ƒë√£ s·∫µn s√†ng: {bot.user}")

def is_owner(interaction: discord.Interaction):
    return interaction.user.id == OWNER_ID

def check_channel(interaction: discord.Interaction):
    return interaction.channel.id == CHANNEL_ID

# /deploy
@tree.command(name="deploy", description="T·∫°o VPS d√πng tmate")
async def deploy(interaction: discord.Interaction):
    if not check_channel(interaction):
        await interaction.response.send_message("‚ùå L·ªánh n√†y ch·ªâ d√πng ƒë∆∞·ª£c trong k√™nh quy ƒë·ªãnh.", ephemeral=True)
        return

    db = load_db()
    uid = str(interaction.user.id)

    if uid in db["sessions"]:
        await interaction.response.send_message("‚ùå B·∫°n ƒë√£ c√≥ VPS ƒëang ho·∫°t ƒë·ªông.", ephemeral=True)
        return

    if db["credits"].get(uid, 0) < 10:
        await interaction.response.send_message("‚ùå B·∫°n c·∫ßn 10 credit ƒë·ªÉ t·∫°o VPS.", ephemeral=True)
        return

    db["credits"][uid] -= 10
    save_db(db)

    await interaction.response.send_message("‚è≥ ƒêang t·∫°o VPS... Vui l√≤ng ƒë·ª£i...", ephemeral=True)

    subprocess.run(["tmate", "-S", "/tmp/tmate.sock", "new-session", "-d"])
    subprocess.run(["tmate", "-S", "/tmp/tmate.sock", "wait", "tmate-ready"])

    ssh = None
    for _ in range(10):
        try:
            ssh_raw = subprocess.check_output(["tmate", "-S", "/tmp/tmate.sock", "display", "-p", "'#{tmate_ssh}'"])
            ssh = ssh_raw.decode().strip().replace("'", "")
            if ssh.startswith("ssh"):
                break
        except:
            time.sleep(1.5)

    if not ssh:
        await interaction.followup.send("‚ùå Kh√¥ng th·ªÉ t·∫°o VPS. Vui l√≤ng th·ª≠ l·∫°i sau.", ephemeral=True)
        return

    db = load_db()
    db["sessions"][uid] = {"ssh": ssh, "time": int(time.time()) + 86400}
    save_db(db)

    try:
        await interaction.user.send(f"‚úÖ VPS c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c t·∫°o:\n`{ssh}`\nS·∫Ω h·∫øt h·∫°n sau 24 gi·ªù.")
        await interaction.followup.send("‚úÖ VPS ƒë√£ g·ª≠i qua tin nh·∫Øn ri√™ng.", ephemeral=True)
    except:
        await interaction.followup.send(f"‚úÖ VPS c·ªßa b·∫°n: `{ssh}`", ephemeral=True)

# /timevps
@tree.command(name="timevps", description="Xem th·ªùi gian c√≤n l·∫°i c·ªßa VPS")
async def timevps(interaction: discord.Interaction):
    db = load_db()
    uid = str(interaction.user.id)
    session = db["sessions"].get(uid)
    if not session:
        await interaction.response.send_message("‚ùå B·∫°n ch∆∞a c√≥ VPS n√†o ƒëang ho·∫°t ƒë·ªông.", ephemeral=True)
        return

    remaining = session["time"] - int(time.time())
    if remaining < 0:
        await interaction.response.send_message("‚ùå VPS c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n.", ephemeral=True)
        return

    hours = remaining // 3600
    minutes = (remaining % 3600) // 60
    await interaction.response.send_message(f"‚è≥ VPS c√≤n l·∫°i: `{hours} gi·ªù {minutes} ph√∫t`", ephemeral=True)

# /getcredit
@tree.command(name="getcredit", description="Nh·∫≠n 1 credit m·ªói 12 gi·ªù")
async def getcredit(interaction: discord.Interaction):
    db = load_db()
    uid = str(interaction.user.id)
    now = int(time.time())

    if uid in db["cooldown"] and now - db["cooldown"][uid] < 43200:
        remaining = 43200 - (now - db["cooldown"][uid])
        hrs = remaining // 3600
        mins = (remaining % 3600) // 60
        await interaction.response.send_message(f"‚ùå B·∫°n c·∫ßn ch·ªù {hrs} gi·ªù {mins} ph√∫t n·ªØa.", ephemeral=True)
        return

    db["credits"][uid] = db["credits"].get(uid, 0) + 1
    db["cooldown"][uid] = now
    save_db(db)

    await interaction.response.send_message("‚úÖ B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c 1 credit.", ephemeral=True)

# /credit
@tree.command(name="credit", description="Xem s·ªë credit b·∫°n ƒëang c√≥")
async def credit(interaction: discord.Interaction):
    db = load_db()
    uid = str(interaction.user.id)
    await interaction.response.send_message(f"üí∞ B·∫°n c√≥ `{db['credits'].get(uid, 0)}` credit.", ephemeral=True)

# /renew
@tree.command(name="renew", description="Gia h·∫°n VPS th√™m 1 ng√†y (10 credit)")
async def renew(interaction: discord.Interaction):
    db = load_db()
    uid = str(interaction.user.id)

    if uid not in db["sessions"]:
        await interaction.response.send_message("‚ùå B·∫°n ch∆∞a c√≥ VPS ƒë·ªÉ gia h·∫°n.", ephemeral=True)
        return

    if db["credits"].get(uid, 0) < 10:
        await interaction.response.send_message("‚ùå B·∫°n c·∫ßn 10 credit ƒë·ªÉ gia h·∫°n VPS.", ephemeral=True)
        return

    db["sessions"][uid]["time"] += 86400
    db["credits"][uid] -= 10
    save_db(db)

    await interaction.response.send_message("‚úÖ VPS c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c gia h·∫°n th√™m 1 ng√†y.", ephemeral=True)

# /givecredit (admin)
@tree.command(name="givecredit", description="T·∫∑ng credit cho ng∆∞·ªùi d√πng (owner)")
@app_commands.describe(user="Ng∆∞·ªùi nh·∫≠n", amount="S·ªë l∆∞·ª£ng credit")
async def givecredit(interaction: discord.Interaction, user: discord.User, amount: int):
    if not is_owner(interaction):
        await interaction.response.send_message("‚ùå L·ªánh n√†y ch·ªâ d√†nh cho owner.", ephemeral=True)
        return
    db = load_db()
    uid = str(user.id)
    db["credits"][uid] = db["credits"].get(uid, 0) + amount
    save_db(db)
    await interaction.response.send_message(f"‚úÖ ƒê√£ t·∫∑ng `{amount}` credit cho {user.name}.", ephemeral=True)

# /xoacredit (admin)
@tree.command(name="xoacredit", description="X√≥a credit c·ªßa ng∆∞·ªùi d√πng (owner)")
@app_commands.describe(user="Ng∆∞·ªùi b·ªã x√≥a")
async def xoacredit(interaction: discord.Interaction, user: discord.User):
    if not is_owner(interaction):
        await interaction.response.send_message("‚ùå L·ªánh n√†y ch·ªâ d√†nh cho owner.", ephemeral=True)
        return
    db = load_db()
    uid = str(user.id)
    db["credits"][uid] = 0
    save_db(db)
    await interaction.response.send_message(f"‚úÖ ƒê√£ x√≥a to√†n b·ªô credit c·ªßa {user.name}.", ephemeral=True)

bot.run(TOKEN)
